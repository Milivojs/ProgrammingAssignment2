##makeCacheMatrix is a function in which we define our matrix and after we define it we make a function that makes inverse of that matrix
makeCacheMatrix<-function(x=matrix())}
inv<-NULL
set<-function(y){
x<<-NULL
}
get<-function()x
setInverse<-function()inv<<-solve(x)
getInverse<-function()inv
list(set=set,
get=get,
setInverse=setInverse
getInverse=getInverse
}
##cacheSolve function checks if the matrix that is inputted already has inverse, if it does it pulls the result from cache if it does not it computes
cacheSolve<-function(x,...)
inv<-x$getInverse()
if(!is.null(inv)){
message("getting data from cache")
return(Inv)
}
mat<-x$get()
inv<-solve(mat,...)
x$setInverse(inv)
inv
}
